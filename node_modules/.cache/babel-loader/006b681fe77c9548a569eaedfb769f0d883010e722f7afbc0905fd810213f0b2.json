{"ast":null,"code":";\n;\nexport let ConnectType = /*#__PURE__*/function (ConnectType) {\n  ConnectType[\"user\"] = \"user\";\n  ConnectType[\"share\"] = \"share\";\n  return ConnectType;\n}({});\n;\nexport let ALERT_TYPE = /*#__PURE__*/function (ALERT_TYPE) {\n  ALERT_TYPE[\"success\"] = \"success\";\n  ALERT_TYPE[\"info\"] = \"info\";\n  ALERT_TYPE[\"warning\"] = \"warning\";\n  ALERT_TYPE[\"error\"] = \"error\";\n  return ALERT_TYPE;\n}({});\nexport let CALL_TYPE = /*#__PURE__*/function (CALL_TYPE) {\n  CALL_TYPE[\"video\"] = \"video\";\n  CALL_TYPE[\"audio\"] = \"audio\";\n  return CALL_TYPE;\n}({});","map":{"version":3,"names":["ConnectType","ALERT_TYPE","CALL_TYPE"],"sources":["E:/projects/longmeet-lets-thango-main/src/interfaces/index.ts"],"sourcesContent":["export interface Offer {\n  offer: RTCSessionDescriptionInit\n};\nexport interface Answer {\n  answer: RTCSessionDescriptionInit\n};\n\nexport interface CastDevices extends MediaDevices {\n  getDisplayMedia: (constraints?: MediaStreamConstraints | undefined) => Promise<MediaStream>\n}\n\nexport enum ConnectType {\n  user = 'user',\n  share = 'share'\n};\n\nexport interface User {\n  name: string,\n  time: Date,\n  type: keyof typeof ConnectType,\n  status: string,\n  shareID?: string,\n  mute: boolean\n}\nexport type Session = Record<string, Peer>;\n\nexport interface Peer {\n  name: string,\n  peerID: string,\n  pc: RTCPeerConnection,\n  remoteStream: MediaStream,\n  listeners: Array<() => void>\n  type: keyof typeof ConnectType\n}\n\nexport enum ALERT_TYPE {\n  success = 'success', \n  info = 'info', \n  warning = 'warning', \n  error = 'error', \n}\n\nexport enum CALL_TYPE {\n  video = 'video',\n  audio = 'audio'\n}"],"mappings":"AAEC;AAGA;AAMD,WAAYA,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAGtB;AAqBD,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAOtB,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}